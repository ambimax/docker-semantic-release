#!/usr/bin/env bash

# exit on error
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

error_exit() {
    echo -e "${RED}$1${NC}"
    exit 1
}

output_success() {
    echo -e "${GREEN}$1${NC}"
}
output_failure() {
    echo -e "${GREEN}$1${NC}"
}

output_info() {
    echo "$1"
}

assert_output() {
    if echo "$OUTPUT" | grep -q "$1"; then
        output_success "$1 was found"
    else
        error_exit "$1 not found"
    fi
}

setup_testrepo() {
    if [ -d testrepo-semantic-composer-releases ]; then
        output_info "LÃ¶sche vorhandenes testrepo"
        rm -rf testrepo-semantic-composer-releases
    fi

    git clone git@github.com:ambimax/testrepo-semantic-composer-releases.git
}

add_testrepo_commit() {
    cd testrepo-semantic-composer-releases || error_exit "error when entering testrepo"

    echo "$1" >> CHANGES.md
    git add CHANGES.md
    git commit -m "$1"

    cd .. || error_exit "error when committing changes"
}

############################################################################################
# Validate
############################################################################################
[ -n "$GITHUB_TOKEN" ] || error_exit "\$GITHUB_TOKEN must be set"


############################################################################################
# Build docker image
############################################################################################
docker build --build-arg GITHUB_TOKEN -t ambimax/semantic-release:latest .


############################################################################################
# Prepare testrepo
############################################################################################
if [ -z "${SKIP_TESTREPO_SETUP}" ]; then
    setup_testrepo
fi

add_testrepo_commit "fix: small hotfix"
add_testrepo_commit "feat: feature added"


############################################################################################
# Validate testrepo
############################################################################################
OUTPUT=$(docker run --rm -e GITHUB_TOKEN --workdir "/github/workspace" --volume "$PWD/testrepo-semantic-composer-releases:/github/workspace" ambimax/semantic-release:latest)

echo "$OUTPUT"

assert_output "Running semantic-release version"
assert_output "@semantic-release/github"
assert_output "@semantic-release/changelog"
assert_output "@semantic-release/git"
assert_output "@semantic-release/commit-analyzer"
assert_output "@semantic-release/release-notes-generator"
assert_output "The next release version is 1.1.0"
assert_output "1.1.0 (https://github.com/ambimax/testrepo-semantic-composer-releases"
assert_output "### Bug Fixes"
assert_output "### Features"


############################################################################################
# Validate testrepo with default .releasesrc.json
############################################################################################
rm "$PWD/testrepo-semantic-composer-releases/.releaserc.json"
OUTPUT=$(docker run --rm -e GITHUB_TOKEN --workdir "/github/workspace" --volume "$PWD/testrepo-semantic-composer-releases:/github/workspace" ambimax/semantic-release:latest)

echo "$OUTPUT"

assert_output "Running semantic-release version"
assert_output "@semantic-release/github"
assert_output "@semantic-release/git"
assert_output "@semantic-release/commit-analyzer"
assert_output "@semantic-release/release-notes-generator"
assert_output "The next release version is 1.1.0"
assert_output "1.1.0 (https://github.com/ambimax/testrepo-semantic-composer-releases"
assert_output "### Bug Fixes"
assert_output "### Features"



############################################################################################
# Done
############################################################################################
output_success "ALL TESTS WERE SUCCESSFUL"
